{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar incrmpcorr = require( '@stdlib/stats-incr-mpcorr' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving squared sample Pearson product-moment correlation coefficient.\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmpcorr2( 3 );\n*\n* var r2 = accumulator();\n* // returns null\n*\n* r2 = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r2 = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* r2 = accumulator( 3.0, -1.0 );\n* // returns ~0.86\n*\n* r2 = accumulator( 5.0, -9.5 );\n* // returns ~0.74\n*\n* r2 = accumulator();\n* // returns ~0.74\n*\n* @example\n* var accumulator = incrmpcorr2( 3, -2.0, 10.0 );\n*/\nfunction incrmpcorr2( W, meanx, meany ) {\n\tvar acc;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tacc = incrmpcorr( W, meanx, meany );\n\t} else {\n\t\tacc = incrmpcorr( W );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} squared sample correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = acc();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn r * r;\n\t\t}\n\t\tr = acc( x, y );\n\t\treturn r * r;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorr2;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving squared sample Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats-incr-mpcorr2\n*\n* @example\n* var incrmpcorr2 = require( '@stdlib/stats-incr-mpcorr2' );\n*\n* var accumulator = incrmpcorr2( 3 );\n*\n* var r2 = accumulator();\n* // returns null\n*\n* r2 = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r2 = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* r2 = accumulator( 3.0, -1.0 );\n* // returns ~0.86\n*\n* r2 = accumulator( 5.0, -9.5 );\n* // returns ~0.74\n*\n* r2 = accumulator();\n* // returns ~0.74\n*/\n\n// MODULES //\n\nvar incrmpcorr2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorr2;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAoB,QAAS,oCAAqC,EAAE,YACpEC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAa,QAAS,2BAA4B,EAClDC,EAAS,QAAS,uBAAwB,EAwC9C,SAASC,EAAaC,EAAGC,EAAOC,EAAQ,CACvC,IAAIC,EACJ,GAAK,CAACR,EAAmBK,CAAE,EAC1B,MAAM,IAAI,UAAWF,EAAQ,4EAA6EE,CAAE,CAAE,EAE/G,GAAK,UAAU,OAAS,EAAI,CAC3B,GAAK,CAACJ,EAAUK,CAAM,EACrB,MAAM,IAAI,UAAWH,EAAQ,mEAAoEG,CAAM,CAAE,EAE1G,GAAK,CAACL,EAAUM,CAAM,EACrB,MAAM,IAAI,UAAWJ,EAAQ,kEAAmEI,CAAM,CAAE,EAEzGC,EAAMN,EAAYG,EAAGC,EAAOC,CAAM,CACnC,MACCC,EAAMN,EAAYG,CAAE,EAErB,OAAOI,EAUP,SAASA,EAAaC,EAAGC,EAAI,CAC5B,IAAIC,EACJ,OAAK,UAAU,SAAW,GACzBA,EAAIJ,EAAI,EACHI,IAAM,KACHA,EAEDA,EAAIA,IAEZA,EAAIJ,EAAKE,EAAGC,CAAE,EACPC,EAAIA,EACZ,CACD,CAKAb,EAAO,QAAUK,ICzDjB,IAAIS,EAAc,IAKlB,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isPositiveInteger", "isNumber", "incrmpcorr", "format", "incrmpcorr2", "W", "meanx", "meany", "acc", "accumulator", "x", "y", "r", "incrmpcorr2"]
}
